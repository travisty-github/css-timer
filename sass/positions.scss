// Width and height of each digit segment
$segment-width: 80px;
$segment-height: 20px;

// The total width of each digit
$digit-width: $segment-width + 2 * $segment-height;

// The space between each digit
$digit-spacing: $segment-height * 2;

// The space to separate each group of digits (i.e. minutes and seconds)
$separate-digit-groups: $segment-height * 2;

// Half the height of the digit. Used to centre vertical position.
$digit-top-margin: -1 * ($segment-width + 1.5 * $segment-height);

.clock {
  position: absolute;
  top: 50%;
  bottom: 50%;
  margin-left: 50%;
  width: 1px;
  height: 1px;
}

#seconds {
  margin-top: $digit-top-margin;
  margin-left: $digit-spacing + $digit-width + $separate-digit-groups;
}
#tensseconds {
  margin-top: $digit-top-margin;
  margin-left: $separate-digit-groups;
}
#minutes {
  margin-top: $digit-top-margin;
  margin-left: $digit-width * -1 - $separate-digit-groups;
}
#tensminutes {
  margin-top: $digit-top-margin;
  margin-left: $digit-spacing * -1 + $digit-width * -2 - $separate-digit-groups;
}

// The more eloquent way to do this would be to rotate the segment itself.
// Unfortunately this creates a new transform context and then the
// pointy ends cannot have their z-index below the bar part of the segment.
// This solution works but makes setting the margins a bit mind bending
// as it is all 90 degrees out so a vertical margin becomes a horiztonal
// direction....
.verticalContainer {
  transform-origin: 0% 50%;
  transform: translate($segment-width + 2 * $segment-height, $segment-height) rotate(90deg);
}
